// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Consuming3rdPartyAPI;
//
//    var randomQuote = RandomQuote.FromJson(jsonString);

using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Consuming3rdPartyAPI
{


    public partial class RandomQuote
    {
        [JsonProperty("quoteIdentifierCompadre")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long QuoteIdentifierCompadre { get; set; }

        [JsonProperty("operationSuccessful")]
        public bool OperationSuccessful { get; set; }

        [JsonProperty("detailsAboutOperation")]
        public string DetailsAboutOperation { get; set; }

        [JsonProperty("generalAPIResponse")]
        public GeneralApiResponse GeneralApiResponse { get; set; }

        [JsonProperty("quoteIdentifierString")]
        public string QuoteIdentifierString { get; set; }

        [JsonProperty("quoteAuthor")]
        public string QuoteAuthor { get; set; }

        [JsonProperty("quoteContent")]
        public string QuoteContent { get; set; }
    }

    public partial class GeneralApiResponse
    {
        [JsonProperty("listOfResponses")]
        public List<string> ListOfResponses { get; set; }

        [JsonProperty("dateTimeOfResponse")]
        public DateTimeOffset DateTimeOfResponse { get; set; }

        [JsonProperty("operationSuccessful")]
        public bool OperationSuccessful { get; set; }

        [JsonProperty("detailsAboutOperation")]
        public string DetailsAboutOperation { get; set; }
    }

    public partial class RandomQuote
    {
        public static RandomQuote FromJson(string json) => JsonConvert.DeserializeObject<RandomQuote>(json, Consuming3rdPartyAPI.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RandomQuote self) => JsonConvert.SerializeObject(self, Consuming3rdPartyAPI.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
