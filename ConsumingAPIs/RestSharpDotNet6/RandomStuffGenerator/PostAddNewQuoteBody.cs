// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using RandomStuffGenerator.NewQuote;
//
//    var postAddNewQuoteBody = PostAddNewQuoteBody.FromJson(jsonString);

namespace RandomStuffGenerator.NewQuote
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using AllTheInterfaces.Interfaces;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PostAddNewQuoteBody : IBody
    {
        [JsonProperty("quoteAuthor")]
        public string QuoteAuthor { get; set; }

        [JsonProperty("quoteContent")]
        public string QuoteContent { get; set; }

        [JsonProperty("optionalAdditionalNotes")]
        public string OptionalAdditionalNotes { get; set; }
    }

    public partial class PostAddNewQuoteBody
    {
        public static PostAddNewQuoteBody FromJson(string json) => JsonConvert.DeserializeObject<PostAddNewQuoteBody>(json, RandomStuffGenerator.NewQuote.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PostAddNewQuoteBody self) => JsonConvert.SerializeObject(self, RandomStuffGenerator.NewQuote.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
